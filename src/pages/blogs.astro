---
import {postQuery} from "@graphql/query";
import {type z} from "astro:content";
import {Picture} from "@astrojs/image/components";
import {graphqlFetch, type PostType} from "@utils/common";
import {parseTimestamp} from "@utils/parse";

import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";

type PostQueryType = z.infer<typeof PostType>;

const {
  data: {postsConnection},
} = await graphqlFetch<PostQueryType>({
  query: postQuery,
  variables: {
    first: 10,
    skip: 0,
  },
});

const posts = postsConnection.edges;
---

<Layout title="Blogs">
  <Container>
    {
      posts.length >= 4 ? (
        <div class="mb-10 grid grid-cols-2 gap-6 xsm:grid-cols-1">
          <div class="flex flex-col space-y-3">
            <Picture
              src={posts[0].node.thumbnailImage.url}
              alt="thumbnail-post"
              sizes="(max-width: 800px) 100vw, 800px"
              widths={[200, 400, 800]}
              aspectRatio="16:9"
              fit="cover"
              position="center"
              format="webp"
              loading="eager"
              class="w-full rounded-md"
            />

            <div class="meta">
              <div class="meta-categories">
                {posts[0].node.categories.map((item) => (
                  <span class="text-purple-400 text-sm">#{item.name}</span>
                ))}
              </div>
              <div>
                <time class="text-gray-400 text-sm font-sans meta-time">
                  {parseTimestamp(posts[0].node.createdAt)}
                </time>
              </div>

              <div class="mt-2 meta-content">
                <a href={`/blogs/${posts[0].node.slug}`} class="no-underline">
                  <p class="text-2xl font-bold font-playfair opacity-80">
                    {posts[0].node.title}
                  </p>
                </a>
              </div>
            </div>
          </div>

          <div class="flex flex-col space-y-3">
            {posts.splice(1, 2).map((item) => (
              <div class="flex space-x-3 xsm:flex-col xsm:space-x-0">
                <div class="w-1/2 xsm:w-full">
                  <Picture
                    src={item.node.thumbnailImage.url}
                    alt="thumbnail-post"
                    sizes="(max-width: 800px) 100vw, 800px"
                    widths={[200, 400, 800]}
                    aspectRatio="16:9"
                    format="webp"
                    fit="cover"
                    position="center"
                    loading="eager"
                    class="w-full rounded-md"
                  />
                </div>
                <div class="w-1/2 xsm:w-full">
                  {item.node.categories.map((c) => (
                    <span class="text-purple-400 text-[13px]">#{c.name}</span>
                  ))}

                  <p class="font-playfair text-gray-400 mt-3">
                    {item.node.title}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      ) : null
    }

    <ul class="list-of-blog">
      <p class="mb-3 text-xl font-playfair">All BÎ»og Posts</p>
      <hr class="opacity-40" />
      <li class="mt-3">
        {
          posts.splice(posts.length >= 3 ? 1 : 0).map((item) => (
            <Fragment>
              {item.node.categories.map((c) => (
                <span class="text-purple-400 text-[13px]">#{c.name}</span>
              ))}

              <a
                href={`/blogs/${item.node.slug}`}
                class="no-underline hover:opacity-70">
                <div class="flex justify-between items-center xsm:flex-col xsm:items-start">
                  <p class="xsm:leading-8 font-playfair font-bold text-2xl opacity-80">
                    {item.node.title}
                  </p>

                  <time class="text-sm xsm:mt-3 text-gray-400">
                    {parseTimestamp(item.node.createdAt)}
                  </time>
                </div>
              </a>
            </Fragment>
          ))
        }
      </li>
    </ul>
  </Container>
</Layout>
