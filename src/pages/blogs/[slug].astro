---
import {type z} from "astro:content";
import {
  type PostType,
  type PostDetailType,
  graphqlFetch,
  replaceContent,
  calculateReadingTime,
} from "@utils/common";
import {parseTime} from "@utils/parse";
import {Picture} from "@astrojs/image/components";
import {postQuery, postDetailQuery} from "@graphql/query";
import {markdown} from "@astropub/md";

import Footer from "@components/footer.astro"
import Container from "@components/container.astro";
import TableOfContent from "@components/table-of-content";
import ProgressBar from "@components/progress-bar";
import BlogLayout from "@layouts/BlogLayout.astro";

type PostQueryType = z.infer<typeof PostType>;
type DetailPostQueryType = z.infer<typeof PostDetailType>;

export async function getStaticPaths() {
  const {data} = await graphqlFetch<PostQueryType>({
    query: postQuery,
  });

  return data.postsConnection.edges.map((item) => ({
    params: {slug: item.node.slug},
  }));
}

const {slug} = Astro.params;

const {
  data: {post},
} = await graphqlFetch<DetailPostQueryType>({
  query: postDetailQuery,
  variables: {slug},
});

const date = parseTime(post.createdAt);
const html = await markdown(post.content);

const updatedHtmlContent = replaceContent(html.toString());
---

<BlogLayout title={post.title} description={post.excerpt} date={date}>
  <ProgressBar client:load />
  <div class="max-w-7xl w-full mx-auto flex xsm:max-w-full xsm:block">
    <TableOfContent client:load markdownContents={post.content} />
    <Container isUsingPadding={false}>

    <div class="border-l 2xl:border-none border-gray-600 px-5">
        <div
        class="pt-5 text-purple-400 flex space-x-2 items-center meta-categories">
        {
          post.categories.map((category) => (
            <span class="text-[15px]">#{category.name}</span>
          ))
        }
      </div>
      <h1 class="text-4xl xsm:text-3xl my-1 font-bold font-playfair">
        {post.title}
      </h1>
      <div class="meta mb-10">
        <div class="meta-content my-2 flex justify-between text-gray-400">
          <div class="meta-inline text-[15px] flex space-x-2 items-center">
            <div>
              By Riz on
              <time class="meta-time">{date}</time>
            </div>
            <p class="text-sm meta-reading-time">
              â˜•{" "}
              <span class="text-gray-500 ml-[2px]">
                {calculateReadingTime(post.content)} min read
              </span>
            </p>
          </div>
          <a href="/blogs" class="text-gray-500">Back</a>
        </div>
      </div>

      <div>
        <div class="meta-image">
          <Picture
            src={post.thumbnailImage.url}
            alt="thumbnail-post"
            sizes="(max-width: 800px) 100vw, 800px"
            widths={[200, 400, 800]}
            aspectRatio="16:9"
            fit="cover"
            position="center"
            format="webp"
            loading="eager"
            class="w-full rounded-md"
          />
        </div>
      </div>
      <div class="blog-prose mt-10">
        <Fragment set:html={updatedHtmlContent} />
      </div>

      {
        import.meta.env.PROD ? (
          <script
            src="https://giscus.app/client.js"
            data-repo="rahXephonz/rizkyy.dev"
            data-repo-id="R_kgDOJ7KWXQ"
            data-category="General"
            data-category-id="DIC_kwDOJ7KWXc4CX4Ft"
            data-mapping="pathname"
            data-strict="0"
            data-reactions-enabled="1"
            data-emit-metadata="0"
            data-input-position="bottom"
            data-theme="preferred_color_scheme"
            data-lang="en"
            data-loading="lazy"
            crossorigin="anonymous"
            async
          />
        ) : null
      }
      </div>

      <Footer />
</Container>

  </div>
</BlogLayout>

<script src="/js/highlight.min.js" is:inline></script>
<script is:inline>
  hljs.highlightAll();
  hljs.configure({ignoreUnescapedHTML: true});
</script>
